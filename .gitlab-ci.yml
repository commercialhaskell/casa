image: registry.gitlab.fpcomplete.com/fpco/default-build-image:7293

cache:
  key: "$CI_BUILD_NAME"
  paths:
    - .stack-work/
    - .stack-root/

stages:
  - build
  - deploy

variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack-root"
  DEPLOYMENT_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_BUILD_REF_SLUG}_${CI_PIPELINE_ID}"
  DEPLOYMENT_NAME: "casa-server-prod"

# This creates anchors for bits of script that are reused between builds
.anchors:
  # The KUBE_* variables are set by Gitlab's Kubernetes deployment service
  - &KUBELOGIN echo "$KUBE_CA_PEM" >"$HOME/ca.pem" &&
    kubectl config set-cluster cluster --server="$KUBE_URL" --certificate-authority="$HOME/ca.pem" &&
    kubectl config set-credentials cluster --token="$KUBE_TOKEN" && kubectl config set-context cluster --cluster=cluster --user=cluster --namespace="$KUBE_NAMESPACE" &&
    kubectl config use-context cluster
  - &HELMUPGRADE helm --tiller-namespace ${KUBE_NAMESPACE} upgrade --install --force "${DEPLOYMENT_NAME}" etc/helm --set ingress.hosts[0]="${HOSTVAR}" --set name="${DEPLOYMENT_NAME}" --set app="${DEPLOYMENT_APP}" --set image.image="${DEPLOYMENT_IMAGE}" --set authorized_port="${DEPLOYMENT_AUTHORIZED_PORT}" --set port="${DEPLOYMENT_PORT}" --values etc/helm/values/$CI_ENVIRONMENT_NAME.yaml --namespace ${KUBE_NAMESPACE}
  - &HELMCHECK helm --tiller-namespace ${KUBE_NAMESPACE} ls &&
    helm --tiller-namespace ${KUBE_NAMESPACE} status "${DEPLOYMENT_NAME}"

build:
  stage: build
  script:
    # Clear *_TOKEN variables during code build so that compile-time code can't access them
    - apt-get update && apt-get install -y --no-install-recommends libpq-dev git rsync
    - CI_BUILD_TOKEN="" KUBE_TOKEN="" PROD_KUBE_TOKEN="" PROD_DOCKER_PASSWORD="" etc/scripts/stage_docker.sh --install-ghc
    - docker build -t "${DEPLOYMENT_IMAGE}" etc/docker
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - docker push "${DEPLOYMENT_IMAGE}"
    - |
      if [[ "$CI_BUILD_REF_NAME" == "master" ]]; then
        docker tag "${DEPLOYMENT_IMAGE}" "${CI_REGISTRY_IMAGE}:latest"
        docker push "${CI_REGISTRY_IMAGE}:latest"
      fi
      if [[ "$CI_BUILD_REF_NAME" == "ci-cron" ]]; then
        docker tag "${DEPLOYMENT_IMAGE}" "${CI_REGISTRY_IMAGE}:ci-cron"
        docker push "${CI_REGISTRY_IMAGE}:ci-cron"
      fi

deploy_prod:
  stage: deploy
  only:
    - master
  environment:
    name: production
    url: "https://{HOST}/"
  variables:
    KUBE_NAMESPACE: "fpco-public"
    DEPLOYMENT_NAME: "casa-server-prod"
    HOSTVAR: "${HOST}"
  script:
    - export
      KUBE_CA_PEM="$PROD_V2_KUBE_CA_PEM"
      KUBE_URL="$PROD_V2_KUBE_URL"
      KUBE_TOKEN="$PROD_V2_KUBE_TOKEN"
      KUBE_NAMESPACE="$PROD_V2_KUBE_NAMESPACE"
    - *KUBELOGIN
    - *HELMUPGRADE
    - *HELMCHECK

deploy_ci:
  stage: deploy
  only:
    - ci
  environment:
    name: staging
    url: "https://${CI_HOST}/"
  variables:
    KUBE_NAMESPACE: "fpco-public"
    DEPLOYMENT_NAME: "casa-server-ci"
    HOSTVAR: "${CI_HOST}"
  script:
    - *HELMUPGRADE
    - *HELMCHECK
